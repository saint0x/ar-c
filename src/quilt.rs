// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateContainerRequest {
    /// Basic container configuration
    ///
    /// Path to container image tarball
    #[prost(string, tag = "1")]
    pub image_path: ::prost::alloc::string::String,
    /// Command to execute in container
    #[prost(string, repeated, tag = "2")]
    pub command: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Environment variables
    #[prost(map = "string, string", tag = "3")]
    pub environment: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Working directory inside container
    #[prost(string, tag = "4")]
    pub working_directory: ::prost::alloc::string::String,
    /// Setup commands for dynamic runtime installation
    ///
    /// Setup commands (e.g., "npm: typescript", "pip: requests")
    #[prost(string, repeated, tag = "5")]
    pub setup_commands: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Resource limits
    ///
    /// Memory limit in megabytes (0 = default)
    #[prost(int32, tag = "6")]
    pub memory_limit_mb: i32,
    /// CPU limit as percentage (0.0 = default)
    #[prost(float, tag = "7")]
    pub cpu_limit_percent: f32,
    /// Namespace configuration
    ///
    /// Enable PID namespace isolation
    #[prost(bool, tag = "8")]
    pub enable_pid_namespace: bool,
    /// Enable mount namespace isolation
    #[prost(bool, tag = "9")]
    pub enable_mount_namespace: bool,
    /// Enable UTS namespace isolation (hostname)
    #[prost(bool, tag = "10")]
    pub enable_uts_namespace: bool,
    /// Enable IPC namespace isolation
    #[prost(bool, tag = "11")]
    pub enable_ipc_namespace: bool,
    /// Enable network namespace isolation
    #[prost(bool, tag = "12")]
    pub enable_network_namespace: bool,
    /// Lifecycle control
    ///
    /// Whether to automatically start the container (default: false for agent control)
    #[prost(bool, tag = "13")]
    pub auto_start: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateContainerResponse {
    /// Generated container ID
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    /// Whether creation was successful
    #[prost(bool, tag = "2")]
    pub success: bool,
    /// Error message if creation failed
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartContainerRequest {
    /// Container ID to start
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartContainerResponse {
    /// Whether start was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error message if start failed
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContainerStatusRequest {
    /// Container ID to query
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContainerStatusResponse {
    /// Container ID
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    /// Current container status
    #[prost(enumeration = "ContainerStatus", tag = "2")]
    pub status: i32,
    /// Exit code (if exited)
    #[prost(int32, tag = "3")]
    pub exit_code: i32,
    /// Error message (if failed)
    #[prost(string, tag = "4")]
    pub error_message: ::prost::alloc::string::String,
    /// Process ID (if running)
    #[prost(int32, tag = "5")]
    pub pid: i32,
    /// Creation timestamp
    #[prost(uint64, tag = "6")]
    pub created_at: u64,
    /// Current memory usage
    #[prost(uint64, tag = "7")]
    pub memory_usage_bytes: u64,
    /// Container rootfs path
    #[prost(string, tag = "8")]
    pub rootfs_path: ::prost::alloc::string::String,
    /// Container IP address (ICC networking)
    #[prost(string, tag = "9")]
    pub ip_address: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogEntry {
    /// Timestamp of log entry
    #[prost(uint64, tag = "1")]
    pub timestamp: u64,
    /// Log message content
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContainerLogsRequest {
    /// Container ID to get logs for
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContainerLogsResponse {
    /// Container ID
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    /// All log entries
    #[prost(message, repeated, tag = "2")]
    pub logs: ::prost::alloc::vec::Vec<LogEntry>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopContainerRequest {
    /// Container ID to stop
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    /// Timeout before force kill (optional)
    #[prost(int32, tag = "2")]
    pub timeout_seconds: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopContainerResponse {
    /// Whether stop was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error message if stop failed
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveContainerRequest {
    /// Container ID to remove
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    /// Force removal even if running
    #[prost(bool, tag = "2")]
    pub force: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveContainerResponse {
    /// Whether removal was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error message if removal failed
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecContainerRequest {
    /// Container ID to execute command in
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    /// Command and arguments to execute
    #[prost(string, repeated, tag = "2")]
    pub command: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Working directory (optional)
    #[prost(string, tag = "3")]
    pub working_directory: ::prost::alloc::string::String,
    /// Additional environment variables
    #[prost(map = "string, string", tag = "4")]
    pub environment: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Whether to capture and return output
    #[prost(bool, tag = "5")]
    pub capture_output: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecContainerResponse {
    /// Whether execution was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Exit code of the executed command
    #[prost(int32, tag = "2")]
    pub exit_code: i32,
    /// Standard output (if capture_output=true)
    #[prost(string, tag = "3")]
    pub stdout: ::prost::alloc::string::String,
    /// Standard error (if capture_output=true)
    #[prost(string, tag = "4")]
    pub stderr: ::prost::alloc::string::String,
    /// Error message if execution failed
    #[prost(string, tag = "5")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecContainerAsyncRequest {
    /// Container ID to execute command in
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    /// Command and arguments to execute
    #[prost(string, repeated, tag = "2")]
    pub command: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Working directory (optional)
    #[prost(string, tag = "3")]
    pub working_directory: ::prost::alloc::string::String,
    /// Additional environment variables
    #[prost(map = "string, string", tag = "4")]
    pub environment: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Whether to capture and return output
    #[prost(bool, tag = "5")]
    pub capture_output: bool,
    /// Optional timeout (0 = no timeout)
    #[prost(int32, tag = "6")]
    pub timeout_seconds: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecContainerAsyncResponse {
    /// Whether task was successfully queued
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// ID of the asynchronous task
    #[prost(string, tag = "2")]
    pub task_id: ::prost::alloc::string::String,
    /// Error message if queuing failed
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskStatusRequest {
    /// ID of the task to query
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskStatusResponse {
    /// ID of the task
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
    /// Current status of the task
    #[prost(enumeration = "TaskStatus", tag = "2")]
    pub status: i32,
    /// When the task started (unix timestamp)
    #[prost(uint64, tag = "3")]
    pub started_at: u64,
    /// When the task completed (unix timestamp, 0 if not completed)
    #[prost(uint64, tag = "4")]
    pub completed_at: u64,
    /// Exit code (if completed)
    #[prost(int32, tag = "5")]
    pub exit_code: i32,
    /// Error message (if failed)
    #[prost(string, tag = "6")]
    pub error_message: ::prost::alloc::string::String,
    /// Optional progress indicator (0.0-100.0)
    #[prost(double, tag = "7")]
    pub progress_percent: f64,
    /// Description of current operation
    #[prost(string, tag = "8")]
    pub current_operation: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskResultRequest {
    /// ID of the task to get result for
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskResultResponse {
    /// ID of the task
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
    /// Final status of the task
    #[prost(enumeration = "TaskStatus", tag = "2")]
    pub status: i32,
    /// Whether the task completed successfully
    #[prost(bool, tag = "3")]
    pub success: bool,
    /// Exit code of the executed command
    #[prost(int32, tag = "4")]
    pub exit_code: i32,
    /// Standard output (if capture_output=true)
    #[prost(string, tag = "5")]
    pub stdout: ::prost::alloc::string::String,
    /// Standard error (if capture_output=true)
    #[prost(string, tag = "6")]
    pub stderr: ::prost::alloc::string::String,
    /// Error message (if failed)
    #[prost(string, tag = "7")]
    pub error_message: ::prost::alloc::string::String,
    /// When the task started (unix timestamp)
    #[prost(uint64, tag = "8")]
    pub started_at: u64,
    /// When the task completed (unix timestamp)
    #[prost(uint64, tag = "9")]
    pub completed_at: u64,
    /// Total execution time in milliseconds
    #[prost(uint64, tag = "10")]
    pub execution_time_ms: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTasksRequest {
    /// Container ID to list tasks for (optional)
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    /// Optional filter by task status
    #[prost(enumeration = "TaskStatus", tag = "2")]
    pub status_filter: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskInfo {
    /// ID of the task
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
    /// Container ID where task is running
    #[prost(string, tag = "2")]
    pub container_id: ::prost::alloc::string::String,
    /// Current status
    #[prost(enumeration = "TaskStatus", tag = "3")]
    pub status: i32,
    /// Command being executed
    #[prost(string, repeated, tag = "4")]
    pub command: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// When the task started
    #[prost(uint64, tag = "5")]
    pub started_at: u64,
    /// When the task completed (0 if not completed)
    #[prost(uint64, tag = "6")]
    pub completed_at: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTasksResponse {
    /// List of tasks
    #[prost(message, repeated, tag = "1")]
    pub tasks: ::prost::alloc::vec::Vec<TaskInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelTaskRequest {
    /// ID of the task to cancel
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelTaskResponse {
    /// Whether the task was successfully canceled
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error message (if any)
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListContainersRequest {
    /// Optional filter by container state
    #[prost(enumeration = "ContainerStatus", tag = "1")]
    pub state_filter: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContainerInfo {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(enumeration = "ContainerStatus", tag = "2")]
    pub status: i32,
    #[prost(string, tag = "3")]
    pub image_path: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub command: ::prost::alloc::string::String,
    #[prost(uint64, tag = "5")]
    pub created_at: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListContainersResponse {
    #[prost(message, repeated, tag = "1")]
    pub containers: ::prost::alloc::vec::Vec<ContainerInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSystemMetricsRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSystemMetricsResponse {
    #[prost(uint64, tag = "1")]
    pub total_memory_bytes: u64,
    #[prost(uint64, tag = "2")]
    pub used_memory_bytes: u64,
    #[prost(uint64, tag = "3")]
    pub total_swap_bytes: u64,
    #[prost(uint64, tag = "4")]
    pub used_swap_bytes: u64,
    #[prost(double, tag = "5")]
    pub cpu_usage_percent: f64,
    #[prost(uint32, tag = "6")]
    pub active_containers: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNetworkTopologyRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetworkNode {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub ip_address: ::prost::alloc::string::String,
    /// List of container IDs this node is connected to
    #[prost(string, repeated, tag = "3")]
    pub connections: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNetworkTopologyResponse {
    #[prost(message, repeated, tag = "1")]
    pub nodes: ::prost::alloc::vec::Vec<NetworkNode>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContainerNetworkInfoRequest {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetContainerNetworkInfoResponse {
    #[prost(string, tag = "1")]
    pub container_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub ip_address: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub bridge_interface: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub veth_host: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub veth_container: ::prost::alloc::string::String,
    #[prost(bool, tag = "6")]
    pub setup_completed: bool,
    #[prost(string, tag = "7")]
    pub status: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadBundleRequest {
    #[prost(oneof = "upload_bundle_request::Payload", tags = "1, 2, 3")]
    pub payload: ::core::option::Option<upload_bundle_request::Payload>,
}
/// Nested message and enum types in `UploadBundleRequest`.
pub mod upload_bundle_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        /// First message: bundle metadata and info
        #[prost(message, tag = "1")]
        Metadata(super::BundleMetadata),
        /// Subsequent messages: bundle data chunks
        #[prost(bytes, tag = "2")]
        Chunk(::prost::alloc::vec::Vec<u8>),
        /// Final message: blake3 checksum for verification
        #[prost(string, tag = "3")]
        Checksum(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BundleMetadata {
    /// Bundle name from manifest
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Bundle version
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    /// Bundle description (optional)
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Total bundle size in bytes
    #[prost(uint64, tag = "4")]
    pub total_size_bytes: u64,
    /// Size of data chunks to follow
    #[prost(uint32, tag = "5")]
    pub chunk_size_bytes: u32,
    /// Expected blake3 hash of complete bundle
    #[prost(string, tag = "6")]
    pub blake3_hash: ::prost::alloc::string::String,
    /// Ed25519 signature (optional, for AUTH.MD integration)
    #[prost(string, tag = "7")]
    pub signature: ::prost::alloc::string::String,
    /// Identity of uploader (optional, for AUTH.MD)
    #[prost(string, tag = "8")]
    pub uploader_identity: ::prost::alloc::string::String,
    /// Additional metadata fields
    #[prost(map = "string, string", tag = "9")]
    pub metadata_fields: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadBundleResponse {
    /// Whether upload was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Generated bundle ID (blake3 hash)
    #[prost(string, tag = "2")]
    pub bundle_id: ::prost::alloc::string::String,
    /// Error message if upload failed
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Final status of the bundle
    #[prost(enumeration = "BundleStatus", tag = "4")]
    pub status: i32,
    /// Total bytes received
    #[prost(uint64, tag = "5")]
    pub bytes_received: u64,
    /// Total upload time
    #[prost(double, tag = "6")]
    pub upload_time_seconds: f64,
    /// Bundle information after successful upload
    #[prost(message, optional, tag = "7")]
    pub bundle_info: ::core::option::Option<BundleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBundleInfoRequest {
    /// Bundle ID to query
    #[prost(string, tag = "1")]
    pub bundle_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBundleInfoResponse {
    /// Whether bundle was found
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error message if bundle not found
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
    /// Bundle information
    #[prost(message, optional, tag = "3")]
    pub bundle_info: ::core::option::Option<BundleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BundleInfo {
    /// Bundle ID (blake3 hash)
    #[prost(string, tag = "1")]
    pub bundle_id: ::prost::alloc::string::String,
    /// Bundle name
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// Bundle version
    #[prost(string, tag = "3")]
    pub version: ::prost::alloc::string::String,
    /// Bundle description
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    /// Current bundle status
    #[prost(enumeration = "BundleStatus", tag = "5")]
    pub status: i32,
    /// Bundle size in bytes
    #[prost(uint64, tag = "6")]
    pub size_bytes: u64,
    /// Upload timestamp (unix timestamp)
    #[prost(uint64, tag = "7")]
    pub uploaded_at: u64,
    /// Identity of uploader
    #[prost(string, tag = "8")]
    pub uploader_identity: ::prost::alloc::string::String,
    /// Parsed bundle manifest
    #[prost(message, optional, tag = "9")]
    pub manifest: ::core::option::Option<BundleManifest>,
    /// Validation results
    #[prost(message, optional, tag = "10")]
    pub validation: ::core::option::Option<BundleValidation>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BundleManifest {
    /// Manifest name
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Manifest version
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    /// Tools defined in bundle
    #[prost(message, repeated, tag = "3")]
    pub tools: ::prost::alloc::vec::Vec<ToolInfo>,
    /// Agents defined in bundle
    #[prost(message, repeated, tag = "4")]
    pub agents: ::prost::alloc::vec::Vec<AgentInfo>,
    /// Teams defined in bundle
    #[prost(message, repeated, tag = "5")]
    pub teams: ::prost::alloc::vec::Vec<TeamInfo>,
    /// Pipelines defined in bundle
    #[prost(message, repeated, tag = "6")]
    pub pipelines: ::prost::alloc::vec::Vec<PipelineInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ToolInfo {
    /// Tool name
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Tool description
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// Tool input schema
    #[prost(map = "string, string", tag = "3")]
    pub inputs: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Tool output schema (optional)
    #[prost(map = "string, string", tag = "4")]
    pub outputs: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AgentInfo {
    /// Agent name
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Agent description
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// Tools used by this agent
    #[prost(string, repeated, tag = "3")]
    pub tools: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TeamInfo {
    /// Team name
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Team description
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// Agent members of this team
    #[prost(string, repeated, tag = "3")]
    pub members: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PipelineInfo {
    /// Pipeline name
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Pipeline description
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BundleValidation {
    /// Whether signature is valid
    #[prost(bool, tag = "1")]
    pub signature_valid: bool,
    /// Whether checksum matches
    #[prost(bool, tag = "2")]
    pub checksum_valid: bool,
    /// Whether manifest is valid
    #[prost(bool, tag = "3")]
    pub manifest_valid: bool,
    /// Whether all dependencies are satisfied
    #[prost(bool, tag = "4")]
    pub dependencies_satisfied: bool,
    /// List of validation errors
    #[prost(string, repeated, tag = "5")]
    pub validation_errors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// List of validation warnings
    #[prost(string, repeated, tag = "6")]
    pub validation_warnings: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBundlesRequest {
    /// Optional filter by bundle status
    #[prost(enumeration = "BundleStatus", tag = "1")]
    pub status_filter: i32,
    /// Optional filter by bundle name (partial match)
    #[prost(string, tag = "2")]
    pub name_filter: ::prost::alloc::string::String,
    /// Maximum number of bundles to return (0 = no limit)
    #[prost(uint32, tag = "3")]
    pub limit: u32,
    /// Offset for pagination
    #[prost(uint32, tag = "4")]
    pub offset: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBundlesResponse {
    /// List of bundles
    #[prost(message, repeated, tag = "1")]
    pub bundles: ::prost::alloc::vec::Vec<BundleInfo>,
    /// Total number of bundles (for pagination)
    #[prost(uint32, tag = "2")]
    pub total_count: u32,
    /// Whether there are more bundles available
    #[prost(bool, tag = "3")]
    pub has_more: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteBundleRequest {
    /// Bundle ID to delete
    #[prost(string, tag = "1")]
    pub bundle_id: ::prost::alloc::string::String,
    /// Force deletion even if deployed
    #[prost(bool, tag = "2")]
    pub force: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteBundleResponse {
    /// Whether deletion was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error message if deletion failed
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateBundleRequest {
    /// Bundle data to validate (for small bundles)
    #[prost(bytes = "vec", tag = "1")]
    pub bundle_data: ::prost::alloc::vec::Vec<u8>,
    /// Path to bundle file (alternative to bundle_data)
    #[prost(string, tag = "2")]
    pub bundle_path: ::prost::alloc::string::String,
    /// Whether to verify signature
    #[prost(bool, tag = "3")]
    pub check_signature: bool,
    /// Whether to check dependencies
    #[prost(bool, tag = "4")]
    pub check_dependencies: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateBundleResponse {
    /// Whether validation passed
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error message if validation failed
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
    /// Detailed validation results
    #[prost(message, optional, tag = "3")]
    pub validation: ::core::option::Option<BundleValidation>,
    /// Parsed manifest (if validation succeeded)
    #[prost(message, optional, tag = "4")]
    pub manifest: ::core::option::Option<BundleManifest>,
}
/// Container status enumeration
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContainerStatus {
    /// Default value, indicates no filter
    Unspecified = 0,
    /// Container created but not started
    Pending = 1,
    /// Container is actively running
    Running = 2,
    /// Container finished execution
    Exited = 3,
    /// Container failed to start or execute
    Failed = 4,
}
impl ContainerStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ContainerStatus::Unspecified => "UNSPECIFIED",
            ContainerStatus::Pending => "PENDING",
            ContainerStatus::Running => "RUNNING",
            ContainerStatus::Exited => "EXITED",
            ContainerStatus::Failed => "FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSPECIFIED" => Some(Self::Unspecified),
            "PENDING" => Some(Self::Pending),
            "RUNNING" => Some(Self::Running),
            "EXITED" => Some(Self::Exited),
            "FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
/// Task status enumeration for async operations
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TaskStatus {
    /// Default value
    TaskUnspecified = 0,
    /// Task queued but not started
    TaskPending = 1,
    /// Task is currently executing
    TaskRunning = 2,
    /// Task completed successfully
    TaskCompleted = 3,
    /// Task failed with error
    TaskFailed = 4,
    /// Task was cancelled
    TaskCancelled = 5,
    /// Task exceeded timeout limit
    TaskTimeout = 6,
}
impl TaskStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TaskStatus::TaskUnspecified => "TASK_UNSPECIFIED",
            TaskStatus::TaskPending => "TASK_PENDING",
            TaskStatus::TaskRunning => "TASK_RUNNING",
            TaskStatus::TaskCompleted => "TASK_COMPLETED",
            TaskStatus::TaskFailed => "TASK_FAILED",
            TaskStatus::TaskCancelled => "TASK_CANCELLED",
            TaskStatus::TaskTimeout => "TASK_TIMEOUT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TASK_UNSPECIFIED" => Some(Self::TaskUnspecified),
            "TASK_PENDING" => Some(Self::TaskPending),
            "TASK_RUNNING" => Some(Self::TaskRunning),
            "TASK_COMPLETED" => Some(Self::TaskCompleted),
            "TASK_FAILED" => Some(Self::TaskFailed),
            "TASK_CANCELLED" => Some(Self::TaskCancelled),
            "TASK_TIMEOUT" => Some(Self::TaskTimeout),
            _ => None,
        }
    }
}
/// Bundle status enumeration
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BundleStatus {
    /// Default value, indicates no filter
    BundleUnspecified = 0,
    /// Bundle is being uploaded
    BundleUploading = 1,
    /// Bundle is being validated
    BundleValidating = 2,
    /// Bundle is successfully stored
    BundleStored = 3,
    /// Bundle is deployed and available
    BundleDeployed = 4,
    /// Bundle upload or validation failed
    BundleFailed = 5,
    /// Bundle failed integrity checks
    BundleCorrupted = 6,
}
impl BundleStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BundleStatus::BundleUnspecified => "BUNDLE_UNSPECIFIED",
            BundleStatus::BundleUploading => "BUNDLE_UPLOADING",
            BundleStatus::BundleValidating => "BUNDLE_VALIDATING",
            BundleStatus::BundleStored => "BUNDLE_STORED",
            BundleStatus::BundleDeployed => "BUNDLE_DEPLOYED",
            BundleStatus::BundleFailed => "BUNDLE_FAILED",
            BundleStatus::BundleCorrupted => "BUNDLE_CORRUPTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BUNDLE_UNSPECIFIED" => Some(Self::BundleUnspecified),
            "BUNDLE_UPLOADING" => Some(Self::BundleUploading),
            "BUNDLE_VALIDATING" => Some(Self::BundleValidating),
            "BUNDLE_STORED" => Some(Self::BundleStored),
            "BUNDLE_DEPLOYED" => Some(Self::BundleDeployed),
            "BUNDLE_FAILED" => Some(Self::BundleFailed),
            "BUNDLE_CORRUPTED" => Some(Self::BundleCorrupted),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod quilt_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// The main service for managing containers
    #[derive(Debug, Clone)]
    pub struct QuiltServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QuiltServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QuiltServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QuiltServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QuiltServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Creates a new container with advanced features
        pub async fn create_container(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateContainerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/CreateContainer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "CreateContainer"));
            self.inner.unary(req, path, codec).await
        }
        /// Starts a created container
        pub async fn start_container(
            &mut self,
            request: impl tonic::IntoRequest<super::StartContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StartContainerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/StartContainer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "StartContainer"));
            self.inner.unary(req, path, codec).await
        }
        /// Gets the status of a container
        pub async fn get_container_status(
            &mut self,
            request: impl tonic::IntoRequest<super::GetContainerStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetContainerStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/GetContainerStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "GetContainerStatus"));
            self.inner.unary(req, path, codec).await
        }
        /// Gets the logs of a container
        pub async fn get_container_logs(
            &mut self,
            request: impl tonic::IntoRequest<super::GetContainerLogsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetContainerLogsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/GetContainerLogs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "GetContainerLogs"));
            self.inner.unary(req, path, codec).await
        }
        /// Stops a running container
        pub async fn stop_container(
            &mut self,
            request: impl tonic::IntoRequest<super::StopContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StopContainerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/StopContainer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "StopContainer"));
            self.inner.unary(req, path, codec).await
        }
        /// Removes a container
        pub async fn remove_container(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveContainerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/RemoveContainer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "RemoveContainer"));
            self.inner.unary(req, path, codec).await
        }
        /// Executes a command in a running container (synchronous)
        pub async fn exec_container(
            &mut self,
            request: impl tonic::IntoRequest<super::ExecContainerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ExecContainerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/ExecContainer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "ExecContainer"));
            self.inner.unary(req, path, codec).await
        }
        /// Executes a command in a running container (asynchronous - returns immediately with task ID)
        pub async fn exec_container_async(
            &mut self,
            request: impl tonic::IntoRequest<super::ExecContainerAsyncRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ExecContainerAsyncResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/ExecContainerAsync",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "ExecContainerAsync"));
            self.inner.unary(req, path, codec).await
        }
        /// Gets the status of an async task
        pub async fn get_task_status(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTaskStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTaskStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/GetTaskStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "GetTaskStatus"));
            self.inner.unary(req, path, codec).await
        }
        /// Gets the result of a completed async task
        pub async fn get_task_result(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTaskResultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTaskResultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/GetTaskResult",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "GetTaskResult"));
            self.inner.unary(req, path, codec).await
        }
        /// Lists all tasks for a container
        pub async fn list_tasks(
            &mut self,
            request: impl tonic::IntoRequest<super::ListTasksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListTasksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/ListTasks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "ListTasks"));
            self.inner.unary(req, path, codec).await
        }
        /// Cancels a running async task
        pub async fn cancel_task(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelTaskRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelTaskResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/CancelTask",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "CancelTask"));
            self.inner.unary(req, path, codec).await
        }
        /// Lists all active containers
        pub async fn list_containers(
            &mut self,
            request: impl tonic::IntoRequest<super::ListContainersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListContainersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/ListContainers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "ListContainers"));
            self.inner.unary(req, path, codec).await
        }
        /// Gets system-level metrics from the host
        pub async fn get_system_metrics(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSystemMetricsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSystemMetricsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/GetSystemMetrics",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "GetSystemMetrics"));
            self.inner.unary(req, path, codec).await
        }
        /// Gets the network topology of all managed containers
        pub async fn get_network_topology(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNetworkTopologyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNetworkTopologyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/GetNetworkTopology",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "GetNetworkTopology"));
            self.inner.unary(req, path, codec).await
        }
        /// Gets detailed network information for a specific container
        pub async fn get_container_network_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetContainerNetworkInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetContainerNetworkInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/GetContainerNetworkInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("quilt.QuiltService", "GetContainerNetworkInfo"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Bundle management operations
        /// Uploads an .aria bundle to the package store (streaming for large files)
        pub async fn upload_bundle(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::UploadBundleRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::UploadBundleResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/UploadBundle",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "UploadBundle"));
            self.inner.client_streaming(req, path, codec).await
        }
        /// Gets information about a specific bundle
        pub async fn get_bundle_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetBundleInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetBundleInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/GetBundleInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "GetBundleInfo"));
            self.inner.unary(req, path, codec).await
        }
        /// Lists all stored bundles with optional filtering
        pub async fn list_bundles(
            &mut self,
            request: impl tonic::IntoRequest<super::ListBundlesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListBundlesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/ListBundles",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "ListBundles"));
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a bundle from storage
        pub async fn delete_bundle(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteBundleRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteBundleResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/DeleteBundle",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "DeleteBundle"));
            self.inner.unary(req, path, codec).await
        }
        /// Validates a bundle without storing it
        pub async fn validate_bundle(
            &mut self,
            request: impl tonic::IntoRequest<super::ValidateBundleRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateBundleResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/quilt.QuiltService/ValidateBundle",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("quilt.QuiltService", "ValidateBundle"));
            self.inner.unary(req, path, codec).await
        }
    }
}
